js string structure

    string = "hello"
    string[0] => access the first character
    string[0] = "H" => change the first character

    string methods
    count = string.count(character) => return the count of the character
    string.length => return the length of the string
    string.toUpperCase() => return the uppercase string
    string.toLowerCase() => return the lowercase string
    string.replace(old, new) => return the replaced string
    string.split(separator) => return the split string
    string.join(separator) => return the joined string
    string.includes(search) => return the boolean value if the string contains the search
    string.indexOf(search) => return the index of the search
    string.lastIndexOf(search) => return the last index of the search
    string.startsWith(search) => return the boolean value if the string starts with the search
    string.endsWith(search) => return the boolean value if the string ends with the search
    string.substring(start, end) => return the substring of the string
    string.slice(start, end) => return the sliced string
    string.concat(string2) => return the concatenated string
    string.trim() => return the trimmed string
    string.padStart(length, char) => return the padded string
    string.padEnd(length, char) => return the padded string
    string.repeat(count) => return the repeated string
    string.charCodeAt(index) => return the character code of the string
    string.fromCharCode(code) => return the character of the code
    string.charAt(index) => return the character of the index
    string.charCodeAt(index) => return the character code of the index
    string.codePointAt(index) => return the character code of the index
    string.fromCodePoint(code) => return the character of the code

    string.reduce(callback, initialValue) => return the reduced value
    example :-  
        string.reduce((acc, curr) => acc + curr, 0)
    example :-
        const str = "12345";
        const sum = str.split('').reduce((acc, curr) => acc + parseInt(curr), 0); // returns 15
        const concat = str.split('').reduce((acc, curr) => acc + curr + acc, ''); // returns "54321"
        const reverseStr = str.split('').reduce((acc, curr) => curr + acc, ''); // returns "54321"
        const doubleStr = str.split('').reduce((acc, curr) => acc + curr + curr, ''); // returns "1122334455"
        const countVowel = str.split('').reduce((acc, curr) => acc + curr.count("a"), 0); // returns 1


    string.reduceRight(callback, initialValue) => return the reduced value from right
    string.reduceLeft(callback, initialValue) => return the reduced value from left
    

    string slicing

    string[start:end] => access elements from start to end
    string[start:end:step] => access elements from start to end with step

    string concatenation

    string1 + string2 => concatenate the strings
